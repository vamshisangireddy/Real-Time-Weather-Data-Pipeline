
# docker-compose.yml
version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0 # Using Confluent's ZooKeeper image
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181" # Expose ZooKeeper client port
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data # Persistent data for ZooKeeper
      - zookeeper-log:/var/lib/zookeeper/log   # Persistent logs for ZooKeeper

  kafka:
    image: confluentinc/cp-kafka:7.5.0 # Using Confluent's Kafka broker image
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper # Ensure ZooKeeper starts before Kafka
    ports:
      - "9092:9092"   # For external clients (e.g., your Python producer on your host machine)
      - "29092:29092" # For internal Docker network communication (other containers in this compose file)
    environment:
      KAFKA_BROKER_ID: 1 # Unique ID for this Kafka broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # How Kafka finds ZooKeeper (using Docker service name)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT # Define listener protocols
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092 # Crucial for clients
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # For single-broker setup, use 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Speeds up consumer group rebalancing for dev
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data # Persistent data for Kafka broker

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
